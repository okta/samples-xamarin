version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.1

jobs:
  # Build .NET Standard project (works on any executor)
  build-dotnet:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Configure Git for HTTPS
          command: |
            git config --global url."https://github.com/".insteadOf "git@github.com:"
            git config --global url."https://".insteadOf "git://"
      - checkout

      - run:
          name: Install .NET SDK
          command: |
            wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            rm packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install -y apt-transport-https
            sudo apt-get update
            sudo apt-get install -y dotnet-sdk-6.0

      - run: dotnet --version

      - run: 
          name: Restore packages
          command: |
            dotnet restore ./Okta.Xamarin.Demo/Okta.Xamarin.Demo.csproj --verbosity normal

      - run:
          name: Build .NET Standard Project
          command: |
            dotnet build ./Okta.Xamarin.Demo/Okta.Xamarin.Demo.csproj --configuration Release --verbosity normal
            echo "✅ Core .NET Standard project built successfully"

      - run:
          name: List Build Artifacts
          command: |
            echo "=== .NET Standard build artifacts ==="
            find ./Okta.Xamarin.Demo/bin -name "*.dll" -o -name "*.exe" | head -20
            echo "=== Total .NET artifact count ==="
            find ./Okta.Xamarin.Demo/bin -name "*.dll" -o -name "*.exe" | wc -l

      - persist_to_workspace:
          root: .
          paths:
            - Okta.Xamarin.Demo/bin
            - Okta.Xamarin.Demo/obj

  # Build Android project  
  build-android:
    docker:
      - image: cimg/android:2025.08.1-ndk  # Latest Android image with NDK
    resource_class: large  # Android builds need more resources
    steps:
      - run:
          name: Configure Git for HTTPS
          command: |
            git config --global url."https://github.com/".insteadOf "git@github.com:"
            git config --global url."https://".insteadOf "git://"
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Install .NET SDK
          command: |
            wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            rm packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install -y apt-transport-https
            sudo apt-get update
            sudo apt-get install -y dotnet-sdk-6.0

      - run:
          name: Setup Android Environment
          command: |
            # Accept Android SDK licenses
            yes | sdkmanager --licenses || true
            # Install required Xamarin workloads
            dotnet workload install android --skip-sign-check --verbosity diagnostic
            # Set environment variables
            echo 'export ANDROID_HOME=$ANDROID_SDK_ROOT' >> $BASH_ENV
            echo 'export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Restore Android packages
          command: |
            dotnet restore ./Okta.Xamarin.Demo.Android/Okta.Xamarin.Demo.Android.csproj --verbosity normal

      - run:
          name: Build Android Project
          command: |
            dotnet build ./Okta.Xamarin.Demo.Android/Okta.Xamarin.Demo.Android.csproj --configuration Release --verbosity normal
            echo "✅ Android project built successfully"

      - run:
          name: List Android Artifacts
          command: |
            echo "=== Android build artifacts ==="
            find ./Okta.Xamarin.Demo.Android/bin -name "*.apk" -o -name "*.dll" | head -10

      - persist_to_workspace:
          root: .
          paths:
            - Okta.Xamarin.Demo.Android/bin

  # Build iOS project on macOS
  build-ios:
    macos:
      xcode: 16.0.0  # Latest stable Xcode
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Install .NET SDK on macOS
          command: |
            # Download and install .NET SDK for macOS
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 6.0
            echo 'export PATH="$HOME/.dotnet:$PATH"' >> $BASH_ENV
            echo 'export DOTNET_ROOT="$HOME/.dotnet"' >> $BASH_ENV
            source $BASH_ENV
            dotnet --version

      - run:
          name: Install iOS Workloads
          command: |
            source $BASH_ENV
            dotnet workload install ios --skip-sign-check --verbosity diagnostic

      - run:
          name: Restore iOS packages
          command: |
            source $BASH_ENV
            dotnet restore ./Okta.Xamarin.Demo.iOS/Okta.Xamarin.Demo.iOS.csproj --verbosity normal

      - run:
          name: Build iOS Project
          command: |
            source $BASH_ENV
            # Build for iOS simulator (doesn't require provisioning profiles)
            dotnet build ./Okta.Xamarin.Demo.iOS/Okta.Xamarin.Demo.iOS.csproj --configuration Release --verbosity normal -p:Platform=iPhoneSimulator
            echo "✅ iOS project built successfully"

      - run:
          name: List iOS Artifacts
          command: |
            echo "=== iOS build artifacts ==="
            find ./Okta.Xamarin.Demo.iOS/bin -name "*.app" -o -name "*.dll" | head -10

      - persist_to_workspace:
          root: .
          paths:
            - Okta.Xamarin.Demo.iOS/bin

  # Run malware scanner after all builds complete
  reversing-labs:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Configure Git for HTTPS
          command: |
            git config --global url."https://github.com/".insteadOf "git@github.com:"
            git config --global url."https://".insteadOf "git://"
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: List All Build Artifacts for Scanning
          command: |
            echo "=== All build artifacts for malware scanning ==="
            find . -name "*.dll" -o -name "*.exe" -o -name "*.apk" -o -name "*.app" | head -30
            echo "=== Total artifact count ==="
            find . -name "*.dll" -o -name "*.exe" -o -name "*.apk" -o -name "*.app" | wc -l
       
      # Install Python and RL wrapper
      - run:
          name: Install Python
          command: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            sudo pip3 install --upgrade pip
  
      # Download the scanner from Okta Security
      - run:
          name: Download Reverse Labs Scanner
          command: |
            curl https://dso-resources.oktasecurity.com/scanner \
              -H "x-api-key: $DSO_RLSECURE_TOKEN" \
              --output rl_wrapper-0.0.2+35ababa-py3-none-any.whl

      # Install the wrapper that was downloaded
      - run:
          name: Install RL Wrapper
          command: |
            pip3 install ./rl_wrapper-0.0.2+35ababa-py3-none-any.whl
  
      # Setup the AWS profile
      - aws-cli/setup:
          profile_name: default
          role_arn: $AWS_ARN
          region: us-east-1

      # Get the credentials and save to env
      - run: 
          name: Export AWS credentials
          command: |
            eval "$(aws configure export-credentials --profile default --format env)" 2> /dev/null

      # Run the wrapper, do not change anything here
      - run:
          name: Run Reversing Labs Wrapper Scanner
          command: |
            rl-wrapper \
              --artifact ${CIRCLE_WORKING_DIRECTORY/#\~/$HOME} \
              --name $CIRCLE_PROJECT_REPONAME \
              --version $CIRCLE_SHA1 \
              --repository $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME \
              --commit $CIRCLE_SHA1 \
              --build-env "circleci" \
              --suppress_output

workflows:
  "Mobile Build and Malware Scanner":
    jobs:
      # Build .NET Standard first (fastest and most reliable)
      - build-dotnet
      
      # Build mobile projects in parallel (require different executors)
      - build-android:
          requires:
            - build-dotnet
            
      - build-ios:
          requires:
            - build-dotnet
      
      # Run malware scanner after all builds complete
      - reversing-labs:
          requires:
            - build-dotnet
            - build-android
            - build-ios
          context:
            - static-analysis
