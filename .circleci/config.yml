version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.1

jobs:
  # Build .NET Standard project (works on any executor)
  build-dotnet:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Configure Git for HTTPS
          command: |
            git config --global url."https://github.com/".insteadOf "git@github.com:"
            git config --global url."https://".insteadOf "git://"
      - checkout

      - run:
          name: Install .NET SDK
          command: |
            # Use official .NET install script for better reliability
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 6.0
            echo 'export DOTNET_ROOT=$HOME/.dotnet' >> $BASH_ENV
            echo 'export PATH="$HOME/.dotnet:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            dotnet --version

      - run:
          name: Restore packages
          command: |
            source $BASH_ENV
            dotnet restore ./Okta.Xamarin.Demo/Okta.Xamarin.Demo.csproj --verbosity normal

      - run:
          name: Build .NET Standard Project
          command: |
            source $BASH_ENV
            dotnet build ./Okta.Xamarin.Demo/Okta.Xamarin.Demo.csproj --configuration Release --verbosity normal
            echo "✅ Core .NET Standard project built successfully"

      - run:
          name: List Build Artifacts
          command: |
            source $BASH_ENV
            echo "=== .NET Standard build artifacts ==="
            find ./Okta.Xamarin.Demo/bin -name "*.dll" -o -name "*.exe" | head -20
            echo "=== Total .NET artifact count ==="
            find ./Okta.Xamarin.Demo/bin -name "*.dll" -o -name "*.exe" | wc -l

      - persist_to_workspace:
          root: .
          paths:
            - Okta.Xamarin.Demo/bin
            - Okta.Xamarin.Demo/obj

  # Build Android project  
  build-android:
    docker:
      - image: cimg/android:2024.07.1-ndk  # Stable Android image with NDK and sudo/git
    resource_class: large  # Android builds need more resources
    steps:
      - run:
          name: Configure Git for HTTPS
          command: |
            git config --global url."https://github.com/".insteadOf "git@github.com:"
            git config --global url."https://".insteadOf "git://"
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Install .NET SDK (user-local)
          command: |
            # Use .NET install script instead of apt-get to avoid host issues
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 6.0 --install-dir $HOME/.dotnet
            echo 'export DOTNET_ROOT=$HOME/.dotnet' >> $BASH_ENV
            echo 'export PATH="$HOME/.dotnet:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            dotnet --version

      - run:
          name: Setup Android Environment
          command: |
            source $BASH_ENV
            # Create Android SDK directories if they don't exist
            mkdir -p $ANDROID_SDK_ROOT/licenses
            mkdir -p ~/.android
            echo 'count=0' > ~/.android/repositories.cfg
            
            # Accept Android SDK licenses via multiple methods
            echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
            echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_SDK_ROOT/licenses/android-sdk-preview-license"
            yes | sdkmanager --licenses || true
            yes | sdkmanager --update || true
            
            # Install required Xamarin workloads
            dotnet workload install android --skip-sign-check --verbosity minimal
            
            # Set additional environment variables
            echo 'export ANDROID_HOME=$ANDROID_SDK_ROOT' >> $BASH_ENV
            echo 'export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64' >> $BASH_ENV
            source $BASH_ENV
            
            # Debug environment
            echo "=== Environment Debug ==="
            echo "DOTNET_ROOT: $DOTNET_ROOT"
            echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
            echo "JAVA_HOME: $JAVA_HOME"
            dotnet --info

      - run:
          name: Restore Android packages
          command: |
            source $BASH_ENV
            dotnet restore ./Okta.Xamarin.Demo.Android/Okta.Xamarin.Demo.Android.csproj --verbosity normal

      - run:
          name: Build Android Project
          command: |
            source $BASH_ENV
            dotnet build ./Okta.Xamarin.Demo.Android/Okta.Xamarin.Demo.Android.csproj --configuration Release --verbosity normal
            echo "✅ Android project built successfully"

      - run:
          name: List Android Artifacts
          command: |
            echo "=== Android build artifacts ==="
            find ./Okta.Xamarin.Demo.Android/bin -name "*.apk" -o -name "*.dll" | head -10

      - persist_to_workspace:
          root: .
          paths:
            - Okta.Xamarin.Demo.Android/bin

  # Build iOS project on macOS (Intel for legacy Xamarin)
  build-ios:
    macos:
      xcode: 14.3.1  # Intel-based Xcode image compatible with Mono/Xamarin
    resource_class: macos.x86.medium.gen2
    steps:
      - run:
          name: Configure Git for HTTPS (macOS)
          command: |
            git config --global url."https://github.com/".insteadOf "git@github.com:"
            git config --global url."https://".insteadOf "git://"
            ssh-keyscan github.com >> ~/.ssh/known_hosts || true
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Install .NET SDK on macOS
          command: |
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 6.0
            echo 'export PATH="$HOME/.dotnet:$PATH"' >> $BASH_ENV
            echo 'export DOTNET_ROOT="$HOME/.dotnet"' >> $BASH_ENV
            source $BASH_ENV
            dotnet --version
            echo "=== .NET SDK Info ==="
            dotnet --info

      - run:
          name: Accept Xcode license
          command: |
            sudo xcodebuild -license accept || true

      - run:
          name: Install Mono MDK (for msbuild)
          command: |
            brew update
            brew install --cask mono-mdk || brew install mono || true
            mono --version || true
            msbuild -version || true

      - run:
          name: Install Xamarin.iOS (optional via URL)
          command: |
            if [ -n "${XAMARIN_IOS_PKG_URL:-}" ]; then
              echo "Downloading Xamarin.iOS from $XAMARIN_IOS_PKG_URL"
              curl -L "$XAMARIN_IOS_PKG_URL" -o xamarin.ios.pkg
              sudo installer -pkg xamarin.ios.pkg -target /
            else
              echo "XAMARIN_IOS_PKG_URL not set; skipping Xamarin.iOS installation"
            fi

      - run:
          name: Install iOS workload packs
          command: |
            source "$BASH_ENV"
            dotnet workload install ios --skip-sign-check --verbosity minimal
            dotnet workload list

      - run:
          name: Locate Xamarin.iOS targets and configure MSBuild
          command: |
            set -euo pipefail
            # Try typical Xamarin.iOS targets locations
            IOS_TARGETS=""
            for p in \
              "/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.CSharp.targets" \
              "/Library/Frameworks/Xamarin.iOS.framework/Versions/Current/lib/mono/msbuild/Xamarin.iOS/Xamarin.iOS.CSharp.targets"; do
              if [ -f "$p" ]; then IOS_TARGETS="$p"; break; fi
            done

            if [ -n "$IOS_TARGETS" ]; then
              echo "Found Xamarin.iOS targets at: $IOS_TARGETS"
              IOS_MSBUILD_DIR="$(dirname "$IOS_TARGETS")"
              # Set MSBuildExtensionsPath to xbuild root so $(MSBuildExtensionsPath)\Xamarin\iOS resolves correctly
              echo "export MSBuildExtensionsPath=$(cd "$IOS_MSBUILD_DIR/../.." && pwd)" >> "$BASH_ENV"
              echo "export MSBuildSDKsPath=/Library/Frameworks/Mono.framework/External/xbuild/SDKs" >> "$BASH_ENV"
              source "$BASH_ENV"
            else
              echo "Xamarin.iOS targets not found in system paths. Attempting to bridge from .NET packs..."
              source "$BASH_ENV"
              SDKDIR="$(dirname "$MSBuildSDKsPath")"
              IOS_TARGETS_DIR="$(find "$DOTNET_ROOT/packs" -type f -name Xamarin.iOS.CSharp.targets -print -quit | xargs dirname || true)"
              if [ -z "$IOS_TARGETS_DIR" ]; then
                echo "❌ Could not locate Xamarin.iOS.CSharp.targets in .NET packs"
              else
                echo "Using iOS MSBuild dir from packs: $IOS_TARGETS_DIR"
                mkdir -p "$SDKDIR/Xamarin"
                rm -f "$SDKDIR/Xamarin/iOS" || true
                ln -s "$IOS_TARGETS_DIR" "$SDKDIR/Xamarin/iOS"
                ls -al "$SDKDIR/Xamarin/iOS"/Xamarin.iOS.CSharp.targets || true
              fi
            fi

      - run:
          name: Restore iOS packages
          command: |
            source "$BASH_ENV"
            nuget restore ./Okta.Xamarin.Demo.iOS/Okta.Xamarin.Demo.iOS.csproj || true
            dotnet restore ./Okta.Xamarin.Demo.iOS/Okta.Xamarin.Demo.iOS.csproj --verbosity minimal || true

      - run:
          name: Build iOS Project (Simulator) with fallbacks
          command: |
            set -e
            source "$BASH_ENV"
            echo "=== iOS Project Analysis ==="
            head -20 ./Okta.Xamarin.Demo.iOS/Okta.Xamarin.Demo.iOS.csproj || true

            echo "Trying msbuild (Mono) first..."
            if command -v msbuild >/dev/null 2>&1; then
              if msbuild ./Okta.Xamarin.Demo.iOS/Okta.Xamarin.Demo.iOS.csproj \
                /t:Restore,Build \
                /p:Configuration=Release \
                /p:Platform=iPhoneSimulator \
                /verbosity:minimal; then
                echo "✅ iOS project built successfully with Mono msbuild"
              else
                echo "Mono msbuild failed, trying dotnet build strategies..."
                if dotnet build ./Okta.Xamarin.Demo.iOS/Okta.Xamarin.Demo.iOS.csproj --configuration Release --verbosity minimal -p:Platform=iPhoneSimulator -p:BuildIpa=false; then
                  echo "✅ iOS project built successfully with dotnet build"
                elif dotnet build ./Okta.Xamarin.Demo.iOS/Okta.Xamarin.Demo.iOS.csproj --configuration Release --verbosity minimal --framework net6.0-ios -p:Platform=iPhoneSimulator; then
                  echo "✅ iOS project built successfully with explicit framework"
                else
                  echo "❌ All iOS build strategies failed"
                  exit 1
                fi
              fi
            else
              echo "msbuild not found, trying dotnet build strategies..."
              if dotnet build ./Okta.Xamarin.Demo.iOS/Okta.Xamarin.Demo.iOS.csproj --configuration Release --verbosity minimal -p:Platform=iPhoneSimulator -p:BuildIpa=false; then
                echo "✅ iOS project built successfully with dotnet build"
              elif dotnet build ./Okta.Xamarin.Demo.iOS/Okta.Xamarin.Demo.iOS.csproj --configuration Release --verbosity minimal --framework net6.0-ios -p:Platform=iPhoneSimulator; then
                echo "✅ iOS project built successfully with explicit framework"
              else
                echo "❌ All iOS build strategies failed"
                exit 1
              fi
            fi

      - run:
          name: List iOS Artifacts
          command: |
            echo "=== iOS build artifacts ==="
            find ./Okta.Xamarin.Demo.iOS/bin -name "*.app" -o -name "*.dll" | head -10

      - persist_to_workspace:
          root: .
          paths:
            - Okta.Xamarin.Demo.iOS/bin

  # Run malware scanner after all builds complete
  reversing-labs:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Configure Git for HTTPS
          command: |
            git config --global url."https://github.com/".insteadOf "git@github.com:"
            git config --global url."https://".insteadOf "git://"
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: List All Build Artifacts for Scanning
          command: |
            echo "=== All build artifacts for malware scanning ==="
            find . -name "*.dll" -o -name "*.exe" -o -name "*.apk" -o -name "*.app" | head -30
            echo "=== Total artifact count ==="
            find . -name "*.dll" -o -name "*.exe" -o -name "*.apk" -o -name "*.app" | wc -l
       
      # Install Python and RL wrapper
      - run:
          name: Install Python
          command: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            sudo pip3 install --upgrade pip
  
      # Download the scanner from Okta Security
      - run:
          name: Download Reverse Labs Scanner
          command: |
            curl https://dso-resources.oktasecurity.com/scanner \
              -H "x-api-key: $DSO_RLSECURE_TOKEN" \
              --output rl_wrapper-0.0.2+35ababa-py3-none-any.whl

      # Install the wrapper that was downloaded
      - run:
          name: Install RL Wrapper
          command: |
            pip3 install ./rl_wrapper-0.0.2+35ababa-py3-none-any.whl
  
      # Setup the AWS profile
      - aws-cli/setup:
          profile_name: default
          role_arn: $AWS_ARN
          region: us-east-1

      # Get the credentials and save to env
      - run: 
          name: Export AWS credentials
          command: |
            eval "$(aws configure export-credentials --profile default --format env)" 2> /dev/null

      # Run the wrapper, do not change anything here
      - run:
          name: Run Reversing Labs Wrapper Scanner
          command: |
            rl-wrapper \
              --artifact ${CIRCLE_WORKING_DIRECTORY/#\~/$HOME} \
              --name $CIRCLE_PROJECT_REPONAME \
              --version $CIRCLE_SHA1 \
              --repository $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME \
              --commit $CIRCLE_SHA1 \
              --build-env "circleci" \
              --suppress_output

workflows:
  "Mobile Build and Malware Scanner":
    jobs:
      # Build .NET Standard first (fastest and most reliable)
      - build-dotnet
      
      # Build mobile projects in parallel (require different executors)
      - build-android:
          requires:
            - build-dotnet
            
      - build-ios:
          requires:
            - build-dotnet
      
      # Run malware scanner after all builds complete
      - reversing-labs:
          requires:
            - build-dotnet
            - build-android
            - build-ios
          context:
            - static-analysis
